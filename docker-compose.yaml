services:
  # zokrates:
  #   build: ./zokrates_service # ✅ Build from your new custom Dockerfile
  #   container_name: zokrates
  #   platform: linux/amd64
  #   ports: # ✅ Expose the Flask app port
  #     - "5000:5000"
  #   volumes:
  #     - ./zokrates_workspace:/home/zokrates
  #     - zokrates_artifacts:/home/zokrates/out
  #   working_dir: /home/zokrates # Flask app will start here, can still use
  #   # entrypoint: ["tail", "-f", "/dev/null"] # ❌ REMOVE THIS, the CMD in Dockerfile handles keeping it alive
  #   # CMD in Dockerfile overrides the default image's CMD/ENTRYPOINT.
  #   # If the base Zokrates image uses ENTRYPOINT for the `zokrates` binary,
  #   # you might need to adjust `zokrates_service/Dockerfile` to ensure `zokrates` is in PATH.
  #   # The current `Dockerfile` approach assumes `zokrates` is still in PATH.

    # networks:
    #   - app_network
  # zokrates:
  #   image: zokrates/zokrates
  #   container_name: zokrates
  #   platform: linux/amd64            # ✅ Force x86_64 emulation
  #   volumes:
  #     - ./zokrates_workspace:/home/zokrates
  #   working_dir: /home/zokrates
  #   entrypoint: ["tail", "-f", "/dev/null"]  # ✅ Keep container alive

  # #   networks:
  # #     - app_network
  oidf:
    build: ./oidf
    container_name: oidf
    ports:
      - "8000:8000"
    volumes:
      - ./OIDF:/app
      - ./zokrates_workspace:/app/zokrates_workspace
      - /var/run/docker.sock:/var/run/docker.sock
      
    working_dir: /app
    environment:
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_PASSWORD: snet2025
      DJANGO_SUPERUSER_EMAIL: s.pandey@tu-berlin.de
    command: |
      bash -c "
        python manage.py migrate && \
        python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); print('Superuser exists') if User.objects.filter(username='admin').exists() else User.objects.create_superuser('admin', 's.pandey@tu-berlin.de', 'snet2025')\" && \
        python manage.py runserver 0.0.0.0:8000
      "
    depends_on:
      - postgres
    # networks:
    #   - app_network


  identityprovider:
    build: ./identityprovider
    container_name: identityprovider
    ports:
      - "8001:8001"
    volumes:
      - ./identityprovider:/app
      - ./identityprovider_data:/app/data
      - ./zokrates_workspace:/app/zokrates_workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    environment:
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_PASSWORD: snet2025
      DJANGO_SUPERUSER_EMAIL: s.pandey@tu-berlin.de
    command: |
      bash -c "
        python manage.py migrate && \
        python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); print('Superuser exists') if User.objects.filter(username='admin').exists() else User.objects.create_superuser('admin', 's.pandey@tu-berlin.de', 'snet2025')\" && \
        python manage.py runserver 0.0.0.0:8001
      "
    depends_on:
      - postgres
    # networks:
    #   - app_network

  relyingparty:
    build: ./relyingparty
    container_name: relyingparty
    ports:
      - "8002:8002"
    volumes:
      - ./relyingparty:/app
      - ./zokrates_workspace:/app/zokrates_workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /app
    environment:
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_PASSWORD: snet2025
      DJANGO_SUPERUSER_EMAIL: s.pandey@tu-berlin.de
    command: |
      bash -c "
        python manage.py migrate && \
        python manage.py shell -c \"from django.contrib.auth import get_user_model; User = get_user_model(); print('Superuser exists') if User.objects.filter(username='admin').exists() else User.objects.create_superuser('admin', 's.pandey@tu-berlin.de', 'snet2025')\" && \
        python manage.py runserver 0.0.0.0:8002
      "
    depends_on:
      - postgres
    #networks:
    #  - app_network

  postgres:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: django_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    command: >
      bash -c "docker-entrypoint.sh postgres
      && psql -U user -c 'CREATE DATABASE oidfdb;'
      && psql -U user -c 'CREATE DATABASE identityproviderdb;'
      && psql -U user -c 'CREATE DATABASE relyingpartydb;'"
    # entrypoint: >
    #   bash -c "
    #   if [ ! -f /var/lib/postgresql/data/.initialized ]; then
    #     docker-entrypoint.sh postgres &
    #     sleep 5;
    #     psql -U user -c 'CREATE DATABASE oidfdb;';
    #      psql -U user -c 'CREATE DATABASE relyingpartydb;';
    #     psql -U user -c 'CREATE DATABASE identityproviderdb;';
    #     touch /var/lib/postgresql/data/.initialized;
    #     wait;
    #   else
    #     docker-entrypoint.sh postgres;
    #   fi
    #   "
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    # networks:
    #   - app_network

volumes:
  postgres_data:
  oidf_data:
  identityprovider_data:
  relyingparty_data:
  zokrates_workspace:




# networks:
#   app_network:
#     driver: bridge